<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Today I Learned</title>
    <link>https://todayilearned.dev/posts/</link>
    <description>Recent content in Posts on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Apr 2019 09:00:00 -0400</lastBuildDate>
    
	<atom:link href="https://todayilearned.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>template tag</title>
      <link>https://todayilearned.dev/posts/template-tag/</link>
      <pubDate>Mon, 01 Apr 2019 09:00:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/template-tag/</guid>
      <description>TIL about the template tag. It&amp;rsquo;s used to hold client-side content that is not to be rendered when a page is loaded but may subsequently be instantiated during runtime using JavaScript.
Let&amp;rsquo;s see some client side input without the template tag:
let container = document.createElement(&amp;#39;div&amp;#39;); // This will trigger the alert  container.innerHTML = &amp;#34;&amp;lt;img src=x onerror=alert(1)&amp;gt;&amp;#34;  Now let&amp;rsquo;s use the &amp;lt;template&amp;gt; tag:
let container = document.createElement(&amp;#39;template&amp;#39;); // Alert NOT triggered  container.</description>
    </item>
    
    <item>
      <title>open-uri</title>
      <link>https://todayilearned.dev/posts/open-uri/</link>
      <pubDate>Sat, 30 Mar 2019 12:50:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/open-uri/</guid>
      <description>TIL open-uri internally patches Kernel.open allowing remote code execution and reading local files. If the string provided to open-uri starts with a pipe it will get executed as a command:
require &amp;#34;open-uri&amp;#34; irb(main):001:0&amp;gt; require &amp;#39;open-uri&amp;#39; =&amp;gt; true irb(main):002:0&amp;gt; open(&amp;#39;|ls&amp;#39;).to_a =&amp;gt; [&amp;#34;content\n&amp;#34;, &amp;#34;data\n&amp;#34;, &amp;#34;layouts\n&amp;#34;, &amp;#34;resources\n&amp;#34;] For more information check this resource.</description>
    </item>
    
    <item>
      <title>scroll behavior</title>
      <link>https://todayilearned.dev/posts/scroll-behavior/</link>
      <pubDate>Wed, 27 Mar 2019 20:45:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/scroll-behavior/</guid>
      <description>TIL about the scroll-behavior CSS property. It sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.
scroll-behavior: smooth; A working example can be found here.</description>
    </item>
    
    <item>
      <title>rename</title>
      <link>https://todayilearned.dev/posts/rename/</link>
      <pubDate>Sun, 24 Mar 2019 16:25:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/rename/</guid>
      <description>TIL about the rename command utility. It allows us to rename files using a Perl Common Regular Expression. Suppose we have the following files:
$ ls temp1.txt	temp2.txt	temp3.txt Now we want to rename our files from temp to final, but are not really sure how to craft our regular expression. In this case we can use the -n flag:
$ rename -n &amp;#39;s/temp/final/&amp;#39; *.txt &amp;#39;temp1.txt&amp;#39; would be renamed to &amp;#39;final1.</description>
    </item>
    
    <item>
      <title>android memory usage</title>
      <link>https://todayilearned.dev/posts/android-memory-usage/</link>
      <pubDate>Fri, 22 Mar 2019 16:30:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/android-memory-usage/</guid>
      <description>TIL Android has a tool called procrank (/system/xbin/procrank), which lists out the memory usage of Linux processes in order from highest to lowest usage. The sizes reported per process are VSS, RSS, PSS, and USS.
VSS
 is the total accessible address space of a process.  RSS
 is the total memory actually held in RAM for a process, including shared libraries.  PSS
 same as RSS, but reports the proportional size of its shared libraries.</description>
    </item>
    
    <item>
      <title>will change</title>
      <link>https://todayilearned.dev/posts/will-change/</link>
      <pubDate>Wed, 20 Mar 2019 19:30:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/will-change/</guid>
      <description>TIL about the will-change CSS property. It provides hints to browsers about how an element is expected to change. Browsers may set up optimizations before an element is actually changed.
.sidebar { will-change: transform; } *This property should be used as a last resort, try to optimize before relying on it.
For example, avoid transitions with top/right/bottom/left properties as they force the browser to create layouts every time.</description>
    </item>
    
    <item>
      <title>unescape() room</title>
      <link>https://todayilearned.dev/posts/unescape-room/</link>
      <pubDate>Mon, 18 Mar 2019 07:55:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/unescape-room/</guid>
      <description>TIL about unescape() room, a game that helps we improve our Cross-Site Scripting (XSS) skills through challenges.
It&amp;rsquo;s based on real world examples and becomes increasingly more difficult as each level progress. The page links to a video that explains the vulnerability and helps us to start the game. Give it a try!</description>
    </item>
    
    <item>
      <title>tldr pages</title>
      <link>https://todayilearned.dev/posts/tldr-pages/</link>
      <pubDate>Mon, 18 Mar 2019 07:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/tldr-pages/</guid>
      <description>TIL about tldr pages, a collection of simplified and community-driven man pages.
It&amp;rsquo;s especially useful when we already know that we need a certain tool but forgot exactly which way to use it. Going through man mytool can be a slow process sometimes.
Let&amp;rsquo;s see a tldr lsof example:
$ tldr lsof lsof Lists open files and the corresponding processes. Note: Root privileges (or sudo) is required to list files opened by others.</description>
    </item>
    
    <item>
      <title>jot command</title>
      <link>https://todayilearned.dev/posts/jot-command/</link>
      <pubDate>Sun, 17 Mar 2019 09:00:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/jot-command/</guid>
      <description>TIL about the jot command. It allows us to print sequential or random data.
The basic option has the format jot [numbers] [start_with] $ jot 3 10 10 11 12
or if you want to generate random data: jot -r [numbers] [lower_limit] [upper_limit]
$ jot -r 3 1 20 5 12 19 Not all of the flags are covered here, man jot does a good job explaining them.</description>
    </item>
    
    <item>
      <title>Intersection Observer API</title>
      <link>https://todayilearned.dev/posts/intersection-observer-api/</link>
      <pubDate>Sat, 16 Mar 2019 09:15:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/intersection-observer-api/</guid>
      <description>TIL about the Intersection Observer API. It allows us to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document&amp;rsquo;s viewport.
Let&amp;rsquo;s see a small example:
// Create the observer and pass it a callback function. // The callback will run whenever a threshold is crossed. var options = { root: document.querySelector(&amp;#39;#scrollArea&amp;#39;), rootMargin: &amp;#39;0px&amp;#39;, threshold: 1.0 } var observer = new IntersectionObserver(callback, options); // Watch this element, please: var target = document.</description>
    </item>
    
    <item>
      <title>at command</title>
      <link>https://todayilearned.dev/posts/at-command/</link>
      <pubDate>Fri, 15 Mar 2019 12:15:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/at-command/</guid>
      <description>TIL about the at command. It allows us to schedule commands to be executed at a later time.
$ echo &amp;#34;bla&amp;#34; | at now + 5 minutes or if you want to execute commands from a file later on:
$ at -f path/to/file 9:30 PM Tue We can type atq to see existing jobs. For more information check man or tldr, it&amp;rsquo;s a really interesting suite of commands.</description>
    </item>
    
    <item>
      <title>bin/rails about</title>
      <link>https://todayilearned.dev/posts/rake-about/</link>
      <pubDate>Thu, 14 Mar 2019 07:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/rake-about/</guid>
      <description>You can use bin/rails about to get information from your Rails project.
$ bin/rails about About your application&amp;#39;s environment Rails version 5.2.2 Ruby version 2.6.1-p33 (x86_64-darwin18) RubyGems version 3.0.2 Rack version 2.0.6 JavaScript Runtime Node.js (V8) Middleware Webpacker::DevServerProxy, Rack::Cors, ... Application root /my/application/root Environment development Database adapter mysql2 Database schema version 20190310174207 </description>
    </item>
    
    <item>
      <title>The ps -o flag</title>
      <link>https://todayilearned.dev/posts/ps-option/</link>
      <pubDate>Tue, 12 Mar 2019 07:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/ps-option/</guid>
      <description>The ps command is well known for displaying process information, but it was only recently that I found out about the useful -o flag. What this flag does is display the information about one or more selected headers.
Let&amp;rsquo;s see an example where we display the rss (Resident Set Size) for the process with pid 5380:
$ ps -o rss -p 5380 RSS 1784  rss represents the real memory, that is, the process&amp;rsquo;s memory that is held in RAM.</description>
    </item>
    
    <item>
      <title>Vim :normal</title>
      <link>https://todayilearned.dev/posts/vim-normal-command/</link>
      <pubDate>Mon, 11 Mar 2019 17:00:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/vim-normal-command/</guid>
      <description>Sometimes it is useful to use the :normal command in VIM, what it does is accept a sequence of keys and pretend they were typed in normal mode.
Let&amp;rsquo;s see how this works with a quick example. Suppose we have a file like the following:
1 abc,123 2 bcd,4 3 cde,54321 4 def,88 And we want the end result to be:
hash[&amp;#34;abc&amp;#34;] = 123 hash[&amp;#34;bcd&amp;#34;] = 4 hash[&amp;#34;cde&amp;#34;] = 54321 hash[&amp;#34;def&amp;#34;] = 88 To solve this in one command we can select the lines we want to modify and use:</description>
    </item>
    
    <item>
      <title>Vim Repeat Substitute</title>
      <link>https://todayilearned.dev/posts/vim-repeat-substitute/</link>
      <pubDate>Sun, 10 Mar 2019 20:25:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/vim-repeat-substitute/</guid>
      <description>TIL about the &amp;amp; command in Vim and how it can be used to repeat the last search and replace pattern.
Let&amp;rsquo;s see how this works with a quick example. Suppose we have a file like the following:
rock paper scissors rock paper scissors rock paper scissors And you want to replace the word rock with lizard just in the lines one and three (don&amp;rsquo;t ask me why). Normally I would do something like:</description>
    </item>
    
  </channel>
</rss>
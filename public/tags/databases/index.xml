<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>databases on Today I Learned</title>
    <link>https://todayilearned.dev/tags/databases/</link>
    <description>Recent content in databases on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 May 2019 21:30:10 -0400</lastBuildDate>
    
	<atom:link href="https://todayilearned.dev/tags/databases/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>rum index</title>
      <link>https://todayilearned.dev/posts/rum-index/</link>
      <pubDate>Wed, 22 May 2019 21:30:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/rum-index/</guid>
      <description>TIL about the RUM index extension in PostgreSQL. It is a variant of the GIN index that stores additional information in the posting tree like lexemes position and timestamps. This solves known GIN problems like slow ranking and phrase searching.
The drawback of course is that this additional information incurs extra build and insert time, making it not ideal for tables that change often.</description>
    </item>
    
    <item>
      <title>ramdisk tests</title>
      <link>https://todayilearned.dev/posts/ramdisk-tests/</link>
      <pubDate>Sat, 04 May 2019 15:30:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/ramdisk-tests/</guid>
      <description>TIL about running tests through a spawned database instance off a RAM disk. This has been applied for a long time, but completely flew under my radar. An early example of this setup with Rails and MySQL can be seen here.
The idea is to make your test databaseâ€™s storage live in memory instead of on-disk since it makes for faster reads and writes, even when considering the use of SSD.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Today I Learned</title>
    <link>https://todayilearned.dev/tags/javascript/</link>
    <description>Recent content in Javascript on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Jun 2019 09:15:00 -0400</lastBuildDate>
    
	<atom:link href="https://todayilearned.dev/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Console Group</title>
      <link>https://todayilearned.dev/posts/console-group/</link>
      <pubDate>Sat, 29 Jun 2019 09:15:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/console-group/</guid>
      <description>TIL about the console.group command used to create a new inline group in the Web Console log. It is used in order to create nesting in your console logs.
Let&amp;rsquo;s see an example:
console.log(&amp;#34;This is the outer level&amp;#34;); console.group(); console.log(&amp;#34;Level 2&amp;#34;); console.group(); console.log(&amp;#34;Level 3&amp;#34;); console.warn(&amp;#34;More of level 3&amp;#34;); console.groupEnd(); console.log(&amp;#34;Back to level 2&amp;#34;); console.groupEnd(); console.log(&amp;#34;Back to the outer level&amp;#34;);  The generated log will be the following:
&amp;#34;This is the outer level&amp;#34; &amp;#34;Level 2&amp;#34; &amp;#34;Level 3&amp;#34; &amp;#34;More of level 3&amp;#34; &amp;#34;Back to level 2&amp;#34; &amp;#34;Back to the outer level&amp;#34;  </description>
    </item>
    
    <item>
      <title>webpack tree shaking</title>
      <link>https://todayilearned.dev/posts/webpack-tree-shaking/</link>
      <pubDate>Wed, 01 May 2019 18:50:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/webpack-tree-shaking/</guid>
      <description>TIL about tree shaking in webpack as a way to eliminate dead code.
The way this is accomplished is by using the sideEffects package.json property.
{ &amp;#34;name&amp;#34;: &amp;#34;your-project&amp;#34;, &amp;#34;sideEffects&amp;#34;: false }  &amp;quot;sideEffects&amp;quot;: false in this context means that our code doesn&amp;rsquo;t have special behaviour when imported other than exposing one or more exports. If that&amp;rsquo;s not the case we can whitelist these special files:
{ &amp;#34;name&amp;#34;: &amp;#34;your-project&amp;#34;, &amp;#34;sideEffects&amp;#34;: [ &amp;#34;.</description>
    </item>
    
    <item>
      <title>template tag</title>
      <link>https://todayilearned.dev/posts/template-tag/</link>
      <pubDate>Mon, 01 Apr 2019 09:00:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/template-tag/</guid>
      <description>TIL about the template tag. It&amp;rsquo;s used to hold client-side content that is not to be rendered when a page is loaded but may subsequently be instantiated during runtime using JavaScript.
Let&amp;rsquo;s see some client side input without the template tag:
let container = document.createElement(&amp;#39;div&amp;#39;); // This will trigger the alert  container.innerHTML = &amp;#34;&amp;lt;img src=x onerror=alert(1)&amp;gt;&amp;#34;  Now let&amp;rsquo;s use the &amp;lt;template&amp;gt; tag:
let container = document.createElement(&amp;#39;template&amp;#39;); // Alert NOT triggered  container.</description>
    </item>
    
    <item>
      <title>Intersection Observer API</title>
      <link>https://todayilearned.dev/posts/intersection-observer-api/</link>
      <pubDate>Sat, 16 Mar 2019 09:15:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/intersection-observer-api/</guid>
      <description>TIL about the Intersection Observer API. It allows us to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document&amp;rsquo;s viewport.
Let&amp;rsquo;s see a small example:
// Create the observer and pass it a callback function. // The callback will run whenever a threshold is crossed. var options = { root: document.querySelector(&amp;#39;#scrollArea&amp;#39;), rootMargin: &amp;#39;0px&amp;#39;, threshold: 1.0 } var observer = new IntersectionObserver(callback, options); // Watch this element, please: var target = document.</description>
    </item>
    
  </channel>
</rss>
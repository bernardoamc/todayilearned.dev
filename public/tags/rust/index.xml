<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Today I Learned</title>
    <link>https://todayilearned.dev/tags/rust/</link>
    <description>Recent content in rust on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jan 2020 21:54:02 -0400</lastBuildDate>
    
	<atom:link href="https://todayilearned.dev/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cargo-rustc-emit-asm</title>
      <link>https://todayilearned.dev/posts/cargo-emit-asm/</link>
      <pubDate>Thu, 23 Jan 2020 21:54:02 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/cargo-emit-asm/</guid>
      <description>TIL that we can get optimized assembly output from a Cargo project by running the following command:
cargo rustc --release -- --emit asm This will output x86 by default, but say we wanted the intel syntax?
cargo rustc -- --emit asm -C &amp;#34;llvm-args=-x86-asm-syntax=intel&amp;#34; </description>
    </item>
    
    <item>
      <title>rust closures</title>
      <link>https://todayilearned.dev/posts/rust-closures/</link>
      <pubDate>Wed, 20 Nov 2019 00:55:35 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/rust-closures/</guid>
      <description>TIL that Rust closures creates an anonymous struct in order to represent their environment. As an example:
let a = 42; let b = 100; let f = |v: i32| v + a + b;  would be represented as something like:
struct __anonymous_e3b0105&amp;lt;&amp;#39;a&amp;gt; { a: &amp;amp;&amp;#39;a i32, b: &amp;amp;&amp;#39;a i32, }  </description>
    </item>
    
    <item>
      <title>from-str</title>
      <link>https://todayilearned.dev/posts/from-str/</link>
      <pubDate>Sat, 19 Oct 2019 22:20:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/from-str/</guid>
      <description>TIL about the FromStr trait in Rust that is implicitly used through str&amp;rsquo;s parse method.
We could have a struct called Period that parses a string like: &amp;ldquo;10 days&amp;rdquo; into Period { value: 10, timeframe: &amp;quot;days&amp;quot; }. The way to use it would be:
let period = &amp;#34;10 days&amp;#34;.parse::&amp;lt;Period&amp;gt;();  </description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby on Today I Learned</title>
    <link>https://todayilearned.dev/tags/ruby/</link>
    <description>Recent content in ruby on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Oct 2020 15:20:00 -0400</lastBuildDate>
    
	<atom:link href="https://todayilearned.dev/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ruby-one-liners</title>
      <link>https://todayilearned.dev/posts/ruby-one-liners/</link>
      <pubDate>Sat, 03 Oct 2020 15:20:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/ruby-one-liners/</guid>
      <description>TIL about the Ruby one-liners cookbook.
It has tons of interesting examples about how to achieve things in Ruby that we would previously rely on awk or sed to tackle.
A small example of what you will find there:
$ ruby -rset -ane &amp;#39;BEGIN{s=Set.new}; (s.add($F[0]); next) if ARGV.size==1; print if s.include?($F[0])&amp;#39; dept.txt marks.txt </description>
    </item>
    
    <item>
      <title>disable-gems</title>
      <link>https://todayilearned.dev/posts/disable-gems/</link>
      <pubDate>Thu, 20 Feb 2020 15:50:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/disable-gems/</guid>
      <description>TIL that we can disable gems when loading a Ruby script through --disable=gems.
$ ruby --disable=gems -e &amp;#39;&amp;#39; </description>
    </item>
    
    <item>
      <title>bsearch</title>
      <link>https://todayilearned.dev/posts/bsearch/</link>
      <pubDate>Wed, 15 May 2019 08:00:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/bsearch/</guid>
      <description>TIL that we have a builtin bsearch in the Array class. It&amp;rsquo;s common for Rubyists to default to find, but as we know bsearch performs much better when we have a sorted Array.
Let&amp;rsquo;s see an example:
ary = [0, 4, 7, 10, 12] ary.bsearch {|x| x &amp;gt;= 4 } #=&amp;gt; 4 ary.bsearch {|x| x &amp;gt;= -1 } #=&amp;gt; 0 We can also use it to search String objects, but in this case we need to use the &amp;lt;=&amp;gt; operator in order to return -1, 0 or 1.</description>
    </item>
    
    <item>
      <title>hash-deep-merge</title>
      <link>https://todayilearned.dev/posts/hash-deep-merge/</link>
      <pubDate>Tue, 07 May 2019 12:50:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/hash-deep-merge/</guid>
      <description>TIL that Hash#deep_merge accepts a block in which you can specify how values from the same key should be merged:
h1 = { a: { b: 1 }, c: 2} h2 = { a: { d: 3 }, c: 4} h1.deep_merge(h2) # =&amp;gt; { a: { b: 1, d: 3 }, c: 4 } h1.deep_merge(h2) { |k, v1, v2| v1 + v2 } # =&amp;gt; { a: { b: 1, d: 3 }, c: 6 } </description>
    </item>
    
    <item>
      <title>safe buffer back reference</title>
      <link>https://todayilearned.dev/posts/safe-buffer-back-reference/</link>
      <pubDate>Wed, 03 Apr 2019 11:45:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/safe-buffer-back-reference/</guid>
      <description>TIL back references for sub, sub!, gsub, and gsub! are finally fixed for ActiveSupport::SafeBuffer through the use of block.binding.eval.
The behaviour being fixed is:
&amp;#34;foo123&amp;#34;.html_safe.sub(/([a-z]+)([0-9]+)/) { $2 + $1 #=&amp;gt; NoMethodError: undefined method `+&amp;#39; for nil:NilClass } If this is confusing I recommend the following resource: Bindings in Ruby â€“ Behind the Magic of Blocks</description>
    </item>
    
    <item>
      <title>open-uri</title>
      <link>https://todayilearned.dev/posts/open-uri/</link>
      <pubDate>Sat, 30 Mar 2019 12:50:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/open-uri/</guid>
      <description>TIL open-uri internally patches Kernel.open allowing remote code execution and reading local files. If the string provided to open-uri starts with a pipe it will get executed as a command:
require &amp;#34;open-uri&amp;#34; irb(main):001:0&amp;gt; require &amp;#39;open-uri&amp;#39; =&amp;gt; true irb(main):002:0&amp;gt; open(&amp;#39;|ls&amp;#39;).to_a =&amp;gt; [&amp;#34;content\n&amp;#34;, &amp;#34;data\n&amp;#34;, &amp;#34;layouts\n&amp;#34;, &amp;#34;resources\n&amp;#34;] For more information check this resource.</description>
    </item>
    
  </channel>
</rss>
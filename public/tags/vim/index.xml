<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on Today I Learned</title>
    <link>https://todayilearned.dev/tags/vim/</link>
    <description>Recent content in Vim on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jun 2019 22:45:10 -0400</lastBuildDate>
    
	<atom:link href="https://todayilearned.dev/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>async run</title>
      <link>https://todayilearned.dev/posts/quickfix-reflector/</link>
      <pubDate>Sat, 08 Jun 2019 22:45:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/quickfix-reflector/</guid>
      <description>TIL about quickfix-reflector to make the quickfix window modifiable. I&amp;rsquo;ve been using it in conjunction with plugins like fzf.vim and async-run that writes to the quickfix window, after that the plugin makes commands like :w and :x reflect the action to every file listed in the quickfix window. It&amp;rsquo;s a great plugin to enable search and replace, allowing things like replacing words through regular expressions across files in a very convenient way.</description>
    </item>
    
    <item>
      <title>async run</title>
      <link>https://todayilearned.dev/posts/async-run/</link>
      <pubDate>Mon, 27 May 2019 19:00:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/async-run/</guid>
      <description>TIL about async run to run shell commands asynchronously in Vim 8 or NeoVim. The output of the shell command can be read in real time using the quickfix window. Let&amp;rsquo;s see an example:
&amp;#34; Running the command asynchronously:AsyncRun git push origin master&amp;#34; Opening the quickfix window:copen An interesting option is to set g:asyncrun_open with a value like 8 to open the quickfix window automatically with a certain height when an asynchronous command is running.</description>
    </item>
    
    <item>
      <title>Vim :normal</title>
      <link>https://todayilearned.dev/posts/vim-normal-command/</link>
      <pubDate>Mon, 11 Mar 2019 17:00:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/vim-normal-command/</guid>
      <description>Sometimes it is useful to use the :normal command in VIM, what it does is accept a sequence of keys and pretend they were typed in normal mode.
Let&amp;rsquo;s see how this works with a quick example. Suppose we have a file like the following:
1 abc,123 2 bcd,4 3 cde,54321 4 def,88 And we want the end result to be:
hash[&amp;#34;abc&amp;#34;] = 123 hash[&amp;#34;bcd&amp;#34;] = 4 hash[&amp;#34;cde&amp;#34;] = 54321 hash[&amp;#34;def&amp;#34;] = 88 To solve this in one command we can select the lines we want to modify and use:</description>
    </item>
    
    <item>
      <title>Vim Repeat Substitute</title>
      <link>https://todayilearned.dev/posts/vim-repeat-substitute/</link>
      <pubDate>Sun, 10 Mar 2019 20:25:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/vim-repeat-substitute/</guid>
      <description>TIL about the &amp;amp; command in Vim and how it can be used to repeat the last search and replace pattern.
Let&amp;rsquo;s see how this works with a quick example. Suppose we have a file like the following:
rock paper scissors rock paper scissors rock paper scissors And you want to replace the word rock with lizard just in the lines one and three (don&amp;rsquo;t ask me why). Normally I would do something like:</description>
    </item>
    
  </channel>
</rss>
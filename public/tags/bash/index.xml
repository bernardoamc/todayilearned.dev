<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Today I Learned</title>
    <link>https://todayilearned.dev/tags/bash/</link>
    <description>Recent content in Bash on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Mar 2019 16:25:10 -0400</lastBuildDate>
    
	<atom:link href="https://todayilearned.dev/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>rename</title>
      <link>https://todayilearned.dev/posts/rename/</link>
      <pubDate>Sun, 24 Mar 2019 16:25:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/rename/</guid>
      <description>TIL about the rename command utility. It allows us to rename files using a Perl Common Regular Expression. Suppose we have the following files:
$ ls temp1.txt	temp2.txt	temp3.txt Now we want to rename our files from temp to final, but are not really sure how to craft our regular expression. In this case we can use the -n flag:
$ rename -n &amp;#39;s/temp/final/&amp;#39; *.txt &amp;#39;temp1.txt&amp;#39; would be renamed to &amp;#39;final1.</description>
    </item>
    
    <item>
      <title>tldr pages</title>
      <link>https://todayilearned.dev/posts/tldr-pages/</link>
      <pubDate>Mon, 18 Mar 2019 07:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/tldr-pages/</guid>
      <description>TIL about tldr pages, a collection of simplified and community-driven man pages.
It&amp;rsquo;s especially useful when we already know that we need a certain tool but forgot exactly which way to use it. Going through man mytool can be a slow process sometimes.
Let&amp;rsquo;s see a tldr lsof example:
$ tldr lsof lsof Lists open files and the corresponding processes. Note: Root privileges (or sudo) is required to list files opened by others.</description>
    </item>
    
    <item>
      <title>jot command</title>
      <link>https://todayilearned.dev/posts/jot-command/</link>
      <pubDate>Sun, 17 Mar 2019 09:00:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/jot-command/</guid>
      <description>TIL about the jot command. It allows us to print sequential or random data.
The basic option has the format jot [numbers] [start_with] $ jot 3 10 10 11 12
or if you want to generate random data: jot -r [numbers] [lower_limit] [upper_limit]
$ jot -r 3 1 20 5 12 19 Not all of the flags are covered here, man jot does a good job explaining them.</description>
    </item>
    
    <item>
      <title>at command</title>
      <link>https://todayilearned.dev/posts/at-command/</link>
      <pubDate>Fri, 15 Mar 2019 12:15:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/at-command/</guid>
      <description>TIL about the at command. It allows us to schedule commands to be executed at a later time.
$ echo &amp;#34;bla&amp;#34; | at now + 5 minutes or if you want to execute commands from a file later on:
$ at -f path/to/file 9:30 PM Tue We can type atq to see existing jobs. For more information check man or tldr, it&amp;rsquo;s a really interesting suite of commands.</description>
    </item>
    
    <item>
      <title>The ps -o flag</title>
      <link>https://todayilearned.dev/posts/ps-option/</link>
      <pubDate>Tue, 12 Mar 2019 07:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/ps-option/</guid>
      <description>The ps command is well known for displaying process information, but it was only recently that I found out about the useful -o flag. What this flag does is display the information about one or more selected headers.
Let&amp;rsquo;s see an example where we display the rss (Resident Set Size) for the process with pid 5380:
$ ps -o rss -p 5380 RSS 1784  rss represents the real memory, that is, the process&amp;rsquo;s memory that is held in RAM.</description>
    </item>
    
  </channel>
</rss>
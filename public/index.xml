<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <link>https://todayilearned.dev/</link>
    <description>Recent content on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Sep 2019 23:10:10 -0400</lastBuildDate>
    
	<atom:link href="https://todayilearned.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim :scriptnames</title>
      <link>https://todayilearned.dev/posts/vim-scriptnames/</link>
      <pubDate>Sat, 14 Sep 2019 23:10:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/vim-scriptnames/</guid>
      <description>TIL about :scriptnames in order to get a list of scripts that vim has loaded. It&amp;rsquo;s pretty useful since we can infer if any of our scripts are being overridden by another one. We can also run this command as scr</description>
    </item>
    
    <item>
      <title>spotlight tricks</title>
      <link>https://todayilearned.dev/posts/spotlight-tricks/</link>
      <pubDate>Fri, 06 Sep 2019 23:15:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/spotlight-tricks/</guid>
      <description>TIL that Spotlight allows us to make calculations, get exchange rates and even the weather. Let&amp;rsquo;s see a few examples:
 ceil(), floor() or sqrt() 100USD in CAD Weather Montreal  </description>
    </item>
    
    <item>
      <title>delete word iterm</title>
      <link>https://todayilearned.dev/posts/delete-word-iterm/</link>
      <pubDate>Tue, 03 Sep 2019 10:30:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/delete-word-iterm/</guid>
      <description>TIL about configuring a shortcut in iTerm2 to delete a word.
 Open the preferences (âŒ˜ + ,) and go to the Keys tab. Add a shortcut key In the Action dropdown, select Send Hex Code and input 0x17  </description>
    </item>
    
    <item>
      <title>rename</title>
      <link>https://todayilearned.dev/posts/tuntap/</link>
      <pubDate>Mon, 12 Aug 2019 20:35:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/tuntap/</guid>
      <description>TIL about the status bar on iTerm2. It&amp;rsquo;s pretty useful with a mix of builtin components like Current Directory or git state and user defined variables or functions. To access and configure the status bar go to Preferences &amp;gt; Profiles &amp;gt; Session. Turn on Status bar enabled then click Configure Status Bar.
Again, scripting plays a huge part in how useful the status bar is.
As an example:
# In ~/.</description>
    </item>
    
    <item>
      <title>curl data</title>
      <link>https://todayilearned.dev/posts/curl-data/</link>
      <pubDate>Fri, 02 Aug 2019 22:00:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/curl-data/</guid>
      <description>TIL that curl --data and curl --data-binary when used with a @filename outputs a different result. The most common one being that --data will strip newlines from the file but --data-binary will not.</description>
    </item>
    
    <item>
      <title>Vim percentage navigation</title>
      <link>https://todayilearned.dev/posts/vim-percentage-navigation/</link>
      <pubDate>Fri, 26 Jul 2019 17:30:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/vim-percentage-navigation/</guid>
      <description>TIL that in normal mode we can just type a percentage and vim will go there, like 50% or 75%.</description>
    </item>
    
    <item>
      <title>merkle tree</title>
      <link>https://todayilearned.dev/posts/merkle-tree/</link>
      <pubDate>Mon, 15 Jul 2019 09:00:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/merkle-tree/</guid>
      <description>TIL about the merkle tree data structure, a tree structure in which each leaf node is a hash of a block of data, and each non-leaf node is a hash of its children.
Label ROOT Value H(H01 + H23) / \ Label [H01] [H23] Value H(H0 + H1) H(H2 + H3) / \ / \ Label [H0] [H1] [H2] [H3] Value H(A) H(B) H(C) H(D) | | | | A B C D It&amp;rsquo;s mostly used in distributed systems for efficient data verification since it only depends on hashes instead of full files.</description>
    </item>
    
    <item>
      <title>Console Group</title>
      <link>https://todayilearned.dev/posts/console-group/</link>
      <pubDate>Sat, 29 Jun 2019 09:15:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/console-group/</guid>
      <description>TIL about the console.group command used to create a new inline group in the Web Console log. It is used in order to create nesting in your console logs.
Let&amp;rsquo;s see an example:
console.log(&amp;#34;This is the outer level&amp;#34;); console.group(); console.log(&amp;#34;Level 2&amp;#34;); console.group(); console.log(&amp;#34;Level 3&amp;#34;); console.warn(&amp;#34;More of level 3&amp;#34;); console.groupEnd(); console.log(&amp;#34;Back to level 2&amp;#34;); console.groupEnd(); console.log(&amp;#34;Back to the outer level&amp;#34;);  The generated log will be the following:
&amp;#34;This is the outer level&amp;#34; &amp;#34;Level 2&amp;#34; &amp;#34;Level 3&amp;#34; &amp;#34;More of level 3&amp;#34; &amp;#34;Back to level 2&amp;#34; &amp;#34;Back to the outer level&amp;#34;  </description>
    </item>
    
    <item>
      <title>cuckoo filter</title>
      <link>https://todayilearned.dev/posts/cuckoo-filter/</link>
      <pubDate>Mon, 24 Jun 2019 09:00:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/cuckoo-filter/</guid>
      <description>TIL about cuckoo filter, a similar algorithm to bloom filters. Both algorithms support fast set membership testing, but cuckoo filters expand on this concept by providing limited counting, deletion and a bounded false positive probability while maintaining a similar space complexity.
cuckoo filters do not play nice with concurrency.</description>
    </item>
    
    <item>
      <title>uuencode</title>
      <link>https://todayilearned.dev/posts/uuencode/</link>
      <pubDate>Fri, 14 Jun 2019 20:35:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/uuencode/</guid>
      <description>TIL about the uuencode and uudecode command utilities. It allows us to decode and encode binary files respectively.
$ echo &amp;#39;foo&amp;#39; | uuencode -o my_binary my_binary $ file my_binary my_binary: uuencoded or xxencoded text, ASCII text $ cat my_binary begin 644 my_binary $9F]O&amp;#34;@`` ` end $uudecode my_binary $cat my_binary foo </description>
    </item>
    
    <item>
      <title>async run</title>
      <link>https://todayilearned.dev/posts/quickfix-reflector/</link>
      <pubDate>Sat, 08 Jun 2019 22:45:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/quickfix-reflector/</guid>
      <description>TIL about quickfix-reflector to make the quickfix window modifiable. I&amp;rsquo;ve been using it in conjunction with plugins like fzf.vim and async-run that writes to the quickfix window, after that the plugin makes commands like :w and :x reflect the action to every file listed in the quickfix window. It&amp;rsquo;s a great plugin to enable search and replace, allowing things like replacing words through regular expressions across files in a very convenient way.</description>
    </item>
    
    <item>
      <title>async run</title>
      <link>https://todayilearned.dev/posts/async-run/</link>
      <pubDate>Mon, 27 May 2019 19:00:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/async-run/</guid>
      <description>TIL about async run to run shell commands asynchronously in Vim 8 or NeoVim. The output of the shell command can be read in real time using the quickfix window. Let&amp;rsquo;s see an example:
&amp;#34; Running the command asynchronously:AsyncRun git push origin master&amp;#34; Opening the quickfix window:copen An interesting option is to set g:asyncrun_open with a value like 8 to open the quickfix window automatically with a certain height when an asynchronous command is running.</description>
    </item>
    
    <item>
      <title>rum index</title>
      <link>https://todayilearned.dev/posts/rum-index/</link>
      <pubDate>Wed, 22 May 2019 21:30:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/rum-index/</guid>
      <description>TIL about the RUM index extension in PostgreSQL. It is a variant of the GIN index that stores additional information in the posting tree like lexemes position and timestamps. This solves known GIN problems like slow ranking and phrase searching.
The drawback of course is that this additional information incurs extra build and insert time, making it not ideal for tables that change often.</description>
    </item>
    
    <item>
      <title>power of two choices</title>
      <link>https://todayilearned.dev/posts/power-of-two-choices/</link>
      <pubDate>Fri, 17 May 2019 20:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/power-of-two-choices/</guid>
      <description>TIL about the Power of Two Choices algorithm used in load balancing, queuing theory and distributed systems in general.
The main takeaway is that it is better to pick two queues at random and choose the one with the least amount of work than finding the best queue and sending a workload there. Why? If we are dealing with many decision makers (as in distributed load balancers for example) and each one choose the best queue disregarding each other choices then all their choices will go to the same queue, overwhelming it.</description>
    </item>
    
    <item>
      <title>bsearch</title>
      <link>https://todayilearned.dev/posts/bsearch/</link>
      <pubDate>Wed, 15 May 2019 08:00:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/bsearch/</guid>
      <description>TIL that we have a builtin bsearch in the Array class. It&amp;rsquo;s common for Rubyists to default to find, but as we know bsearch performs much better when we have a sorted Array.
Let&amp;rsquo;s see an example:
ary = [0, 4, 7, 10, 12] ary.bsearch {|x| x &amp;gt;= 4 } #=&amp;gt; 4 ary.bsearch {|x| x &amp;gt;= -1 } #=&amp;gt; 0 We can also use it to search String objects, but in this case we need to use the &amp;lt;=&amp;gt; operator in order to return -1, 0 or 1.</description>
    </item>
    
    <item>
      <title>amdahl&#39;s law</title>
      <link>https://todayilearned.dev/posts/amdahl-law/</link>
      <pubDate>Thu, 09 May 2019 18:45:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/amdahl-law/</guid>
      <description>TIL about Amdahl&amp;rsquo;s Law as a way to measure the result of a given optimization. It&amp;rsquo;s especially useful to compare different optimizations and see the maximum performance each optimization provides for your system. Another cool thing is that Amdahl&amp;rsquo;s Law works for parallel or serial programs.
It has a few implications:
 Make the common case fast Optimizations wil have less and less effects (Law of diminishing returns)  Here&amp;rsquo;s an interesting video about it.</description>
    </item>
    
    <item>
      <title>hash-deep-merge</title>
      <link>https://todayilearned.dev/posts/hash-deep-merge/</link>
      <pubDate>Tue, 07 May 2019 12:50:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/hash-deep-merge/</guid>
      <description>TIL that Hash#deep_merge accepts a block in which you can specify how values from the same key should be merged:
h1 = { a: { b: 1 }, c: 2} h2 = { a: { d: 3 }, c: 4} h1.deep_merge(h2) # =&amp;gt; { a: { b: 1, d: 3 }, c: 4 } h1.deep_merge(h2) { |k, v1, v2| v1 + v2 } # =&amp;gt; { a: { b: 1, d: 3 }, c: 6 } </description>
    </item>
    
    <item>
      <title>ramdisk tests</title>
      <link>https://todayilearned.dev/posts/ramdisk-tests/</link>
      <pubDate>Sat, 04 May 2019 15:30:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/ramdisk-tests/</guid>
      <description>TIL about running tests through a spawned database instance off a RAM disk. This has been applied for a long time, but completely flew under my radar. An early example of this setup with Rails and MySQL can be seen here.
The idea is to make your test databaseâ€™s storage live in memory instead of on-disk since it makes for faster reads and writes, even when considering the use of SSD.</description>
    </item>
    
    <item>
      <title>webpack tree shaking</title>
      <link>https://todayilearned.dev/posts/webpack-tree-shaking/</link>
      <pubDate>Wed, 01 May 2019 18:50:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/webpack-tree-shaking/</guid>
      <description>TIL about tree shaking in webpack as a way to eliminate dead code.
The way this is accomplished is by using the sideEffects package.json property.
{ &amp;#34;name&amp;#34;: &amp;#34;your-project&amp;#34;, &amp;#34;sideEffects&amp;#34;: false }  &amp;quot;sideEffects&amp;quot;: false in this context means that our code doesn&amp;rsquo;t have special behaviour when imported other than exposing one or more exports. If that&amp;rsquo;s not the case we can whitelist these special files:
{ &amp;#34;name&amp;#34;: &amp;#34;your-project&amp;#34;, &amp;#34;sideEffects&amp;#34;: [ &amp;#34;.</description>
    </item>
    
    <item>
      <title>ulids</title>
      <link>https://todayilearned.dev/posts/ulids/</link>
      <pubDate>Mon, 29 Apr 2019 08:30:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/ulids/</guid>
      <description>TIL about ULID, which stands for &amp;ldquo;Universally Unique Lexicographically Sortable Identifier&amp;rdquo;. Like UUID, ULID have 128 bits but are represented as a 26 character string, as opposed to 36.
An ULID is composed of a timestamp + random sequence of bits:
01AN4Z07BY 79KA1307SR9X4MV3 |----------| |----------------| Timestamp Randomness 48bits 80bits  It gives the system the possibility of sorting identifiers unlike UUIDs, but still makes it difficult to guess an identifier and the amount of resources our system has, which are two potential problems of using sequential ids.</description>
    </item>
    
    <item>
      <title>cp -u flag</title>
      <link>https://todayilearned.dev/posts/cp-u-flag/</link>
      <pubDate>Fri, 26 Apr 2019 18:20:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/cp-u-flag/</guid>
      <description>TIL about the -u flag for cp. It will only copy files that don&amp;rsquo;t exist, or are newer than their existing counterparts in the destination directory.
$ cp -u *.txt app_dir It&amp;rsquo;s a nice replacement to the interactive flag (-i) if we know we want this behaviour.</description>
    </item>
    
    <item>
      <title>roaring bitmap</title>
      <link>https://todayilearned.dev/posts/roaring-bitmap/</link>
      <pubDate>Sat, 13 Apr 2019 19:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/roaring-bitmap/</guid>
      <description>TIL about roaring bitmap, a hybrid data structure.
It&amp;rsquo;s a data structure that is especially suited to compute the intersection, union and the difference between sets. It uses different approaches depending on how your data is distributed like uncompressed bitmaps or sorted arrays.
The way this is done is by dividing the data into chunks of 2^16 integers and using a different strategy for each chunk depending on the data distribution.</description>
    </item>
    
    <item>
      <title>base tag</title>
      <link>https://todayilearned.dev/posts/base-tag/</link>
      <pubDate>Mon, 08 Apr 2019 12:45:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/base-tag/</guid>
      <description>TIL about the base HTML tag. It specifies the base URL to be used for all relative URLs within a document.
&amp;lt;base href=&amp;#34;http://www.example.com/&amp;#34;&amp;gt; &amp;lt;!-- Refers to: http://www.example.com/#relative --&amp;gt; &amp;lt;a href=&amp;#34;#relative&amp;#34;&amp;gt;Relative&amp;lt;/a&amp;gt; It is supported by all major browsers.</description>
    </item>
    
    <item>
      <title>prefers-color-scheme</title>
      <link>https://todayilearned.dev/posts/prefers-color-scheme/</link>
      <pubDate>Fri, 05 Apr 2019 10:30:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/prefers-color-scheme/</guid>
      <description>TIL about the prefers-color-scheme CSS media feature. It is used to detect if the user has requested the system use a light or dark color theme.
@media (prefers-color-scheme: dark) { } Right now it&amp;rsquo;s a feature that is just supported by Firefox and Safari.</description>
    </item>
    
    <item>
      <title>safe buffer back reference</title>
      <link>https://todayilearned.dev/posts/safe-buffer-back-reference/</link>
      <pubDate>Wed, 03 Apr 2019 11:45:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/safe-buffer-back-reference/</guid>
      <description>TIL back references for sub, sub!, gsub, and gsub! are finally fixed for ActiveSupport::SafeBuffer through the use of block.binding.eval.
The behaviour being fixed is:
&amp;#34;foo123&amp;#34;.html_safe.sub(/([a-z]+)([0-9]+)/) { $2 + $1 #=&amp;gt; NoMethodError: undefined method `+&amp;#39; for nil:NilClass } If this is confusing I recommend the following resource: Bindings in Ruby â€“ Behind the Magic of Blocks</description>
    </item>
    
    <item>
      <title>template tag</title>
      <link>https://todayilearned.dev/posts/template-tag/</link>
      <pubDate>Mon, 01 Apr 2019 09:00:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/template-tag/</guid>
      <description>TIL about the template tag. It&amp;rsquo;s used to hold client-side content that is not to be rendered when a page is loaded but may subsequently be instantiated during runtime using JavaScript.
Let&amp;rsquo;s see some client side input without the template tag:
let container = document.createElement(&amp;#39;div&amp;#39;); // This will trigger the alert  container.innerHTML = &amp;#34;&amp;lt;img src=x onerror=alert(1)&amp;gt;&amp;#34;  Now let&amp;rsquo;s use the &amp;lt;template&amp;gt; tag:
let container = document.createElement(&amp;#39;template&amp;#39;); // Alert NOT triggered  container.</description>
    </item>
    
    <item>
      <title>open-uri</title>
      <link>https://todayilearned.dev/posts/open-uri/</link>
      <pubDate>Sat, 30 Mar 2019 12:50:45 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/open-uri/</guid>
      <description>TIL open-uri internally patches Kernel.open allowing remote code execution and reading local files. If the string provided to open-uri starts with a pipe it will get executed as a command:
require &amp;#34;open-uri&amp;#34; irb(main):001:0&amp;gt; require &amp;#39;open-uri&amp;#39; =&amp;gt; true irb(main):002:0&amp;gt; open(&amp;#39;|ls&amp;#39;).to_a =&amp;gt; [&amp;#34;content\n&amp;#34;, &amp;#34;data\n&amp;#34;, &amp;#34;layouts\n&amp;#34;, &amp;#34;resources\n&amp;#34;] For more information check this resource.</description>
    </item>
    
    <item>
      <title>scroll behavior</title>
      <link>https://todayilearned.dev/posts/scroll-behavior/</link>
      <pubDate>Wed, 27 Mar 2019 20:45:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/scroll-behavior/</guid>
      <description>TIL about the scroll-behavior CSS property. It sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.
scroll-behavior: smooth; A working example can be found here.</description>
    </item>
    
    <item>
      <title>rename</title>
      <link>https://todayilearned.dev/posts/rename/</link>
      <pubDate>Sun, 24 Mar 2019 16:25:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/rename/</guid>
      <description>TIL about the rename command utility. It allows us to rename files using a Perl Common Regular Expression. Suppose we have the following files:
$ ls temp1.txt	temp2.txt	temp3.txt Now we want to rename our files from temp to final, but are not really sure how to craft our regular expression. In this case we can use the -n flag:
$ rename -n &amp;#39;s/temp/final/&amp;#39; *.txt &amp;#39;temp1.txt&amp;#39; would be renamed to &amp;#39;final1.</description>
    </item>
    
    <item>
      <title>android memory usage</title>
      <link>https://todayilearned.dev/posts/android-memory-usage/</link>
      <pubDate>Fri, 22 Mar 2019 16:30:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/android-memory-usage/</guid>
      <description>TIL Android has a tool called procrank (/system/xbin/procrank), which lists out the memory usage of Linux processes in order from highest to lowest usage. The sizes reported per process are VSS, RSS, PSS, and USS.
VSS
 is the total accessible address space of a process.  RSS
 is the total memory actually held in RAM for a process, including shared libraries.  PSS
 same as RSS, but reports the proportional size of its shared libraries.</description>
    </item>
    
    <item>
      <title>will change</title>
      <link>https://todayilearned.dev/posts/will-change/</link>
      <pubDate>Wed, 20 Mar 2019 19:30:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/will-change/</guid>
      <description>TIL about the will-change CSS property. It provides hints to browsers about how an element is expected to change. Browsers may set up optimizations before an element is actually changed.
.sidebar { will-change: transform; } *This property should be used as a last resort, try to optimize before relying on it.
For example, avoid transitions with top/right/bottom/left properties as they force the browser to create layouts every time.</description>
    </item>
    
    <item>
      <title>unescape() room</title>
      <link>https://todayilearned.dev/posts/unescape-room/</link>
      <pubDate>Mon, 18 Mar 2019 07:55:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/unescape-room/</guid>
      <description>TIL about unescape() room, a game that helps we improve our Cross-Site Scripting (XSS) skills through challenges.
It&amp;rsquo;s based on real world examples and becomes increasingly more difficult as each level progress. The page links to a video that explains the vulnerability and helps us to start the game. Give it a try!</description>
    </item>
    
    <item>
      <title>tldr pages</title>
      <link>https://todayilearned.dev/posts/tldr-pages/</link>
      <pubDate>Mon, 18 Mar 2019 07:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/tldr-pages/</guid>
      <description>TIL about tldr pages, a collection of simplified and community-driven man pages.
It&amp;rsquo;s especially useful when we already know that we need a certain tool but forgot exactly which way to use it. Going through man mytool can be a slow process sometimes.
Let&amp;rsquo;s see a tldr lsof example:
$ tldr lsof lsof Lists open files and the corresponding processes. Note: Root privileges (or sudo) is required to list files opened by others.</description>
    </item>
    
    <item>
      <title>jot command</title>
      <link>https://todayilearned.dev/posts/jot-command/</link>
      <pubDate>Sun, 17 Mar 2019 09:00:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/jot-command/</guid>
      <description>TIL about the jot command. It allows us to print sequential or random data.
The basic option has the format jot [numbers] [start_with] $ jot 3 10 10 11 12
or if you want to generate random data: jot -r [numbers] [lower_limit] [upper_limit]
$ jot -r 3 1 20 5 12 19 Not all of the flags are covered here, man jot does a good job explaining them.</description>
    </item>
    
    <item>
      <title>Intersection Observer API</title>
      <link>https://todayilearned.dev/posts/intersection-observer-api/</link>
      <pubDate>Sat, 16 Mar 2019 09:15:00 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/intersection-observer-api/</guid>
      <description>TIL about the Intersection Observer API. It allows us to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document&amp;rsquo;s viewport.
Let&amp;rsquo;s see a small example:
// Create the observer and pass it a callback function. // The callback will run whenever a threshold is crossed. var options = { root: document.querySelector(&amp;#39;#scrollArea&amp;#39;), rootMargin: &amp;#39;0px&amp;#39;, threshold: 1.0 } var observer = new IntersectionObserver(callback, options); // Watch this element, please: var target = document.</description>
    </item>
    
    <item>
      <title>at command</title>
      <link>https://todayilearned.dev/posts/at-command/</link>
      <pubDate>Fri, 15 Mar 2019 12:15:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/at-command/</guid>
      <description>TIL about the at command. It allows us to schedule commands to be executed at a later time.
$ echo &amp;#34;bla&amp;#34; | at now + 5 minutes or if you want to execute commands from a file later on:
$ at -f path/to/file 9:30 PM Tue We can type atq to see existing jobs. For more information check man or tldr, it&amp;rsquo;s a really interesting suite of commands.</description>
    </item>
    
    <item>
      <title>bin/rails about</title>
      <link>https://todayilearned.dev/posts/rake-about/</link>
      <pubDate>Thu, 14 Mar 2019 07:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/rake-about/</guid>
      <description>You can use bin/rails about to get information from your Rails project.
$ bin/rails about About your application&amp;#39;s environment Rails version 5.2.2 Ruby version 2.6.1-p33 (x86_64-darwin18) RubyGems version 3.0.2 Rack version 2.0.6 JavaScript Runtime Node.js (V8) Middleware Webpacker::DevServerProxy, Rack::Cors, ... Application root /my/application/root Environment development Database adapter mysql2 Database schema version 20190310174207 </description>
    </item>
    
    <item>
      <title>The ps -o flag</title>
      <link>https://todayilearned.dev/posts/ps-option/</link>
      <pubDate>Tue, 12 Mar 2019 07:50:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/ps-option/</guid>
      <description>The ps command is well known for displaying process information, but it was only recently that I found out about the useful -o flag. What this flag does is display the information about one or more selected headers.
Let&amp;rsquo;s see an example where we display the rss (Resident Set Size) for the process with pid 5380:
$ ps -o rss -p 5380 RSS 1784  rss represents the real memory, that is, the process&amp;rsquo;s memory that is held in RAM.</description>
    </item>
    
    <item>
      <title>Vim :normal</title>
      <link>https://todayilearned.dev/posts/vim-normal-command/</link>
      <pubDate>Mon, 11 Mar 2019 17:00:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/vim-normal-command/</guid>
      <description>Sometimes it is useful to use the :normal command in VIM, what it does is accept a sequence of keys and pretend they were typed in normal mode.
Let&amp;rsquo;s see how this works with a quick example. Suppose we have a file like the following:
1 abc,123 2 bcd,4 3 cde,54321 4 def,88 And we want the end result to be:
hash[&amp;#34;abc&amp;#34;] = 123 hash[&amp;#34;bcd&amp;#34;] = 4 hash[&amp;#34;cde&amp;#34;] = 54321 hash[&amp;#34;def&amp;#34;] = 88 To solve this in one command we can select the lines we want to modify and use:</description>
    </item>
    
    <item>
      <title>Vim Repeat Substitute</title>
      <link>https://todayilearned.dev/posts/vim-repeat-substitute/</link>
      <pubDate>Sun, 10 Mar 2019 20:25:10 -0400</pubDate>
      
      <guid>https://todayilearned.dev/posts/vim-repeat-substitute/</guid>
      <description>TIL about the &amp;amp; command in Vim and how it can be used to repeat the last search and replace pattern.
Let&amp;rsquo;s see how this works with a quick example. Suppose we have a file like the following:
rock paper scissors rock paper scissors rock paper scissors And you want to replace the word rock with lizard just in the lines one and three (don&amp;rsquo;t ask me why). Normally I would do something like:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://todayilearned.dev/posts/iterm-status-bar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://todayilearned.dev/posts/iterm-status-bar/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://todayilearned.dev/topics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://todayilearned.dev/topics/</guid>
      <description>Topics: </description>
    </item>
    
  </channel>
</rss>